#!/bin/bash

# Dialectical Engine Setup Script
# This script installs Espanso and configures the Team of Rivals text snippets

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect OS
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get >/dev/null 2>&1; then
            echo "debian"
        elif command -v yum >/dev/null 2>&1; then
            echo "rhel"
        elif command -v pacman >/dev/null 2>&1; then
            echo "arch"
        else
            echo "linux"
        fi
    else
        echo "unsupported"
    fi
}

# Install Espanso based on OS
install_espanso() {
    local os_type=$1
    
    print_info "Installing Espanso for $os_type..."
    
    case $os_type in
        macos)
            if command -v brew >/dev/null 2>&1; then
                brew tap espanso/espanso
                brew install espanso
            else
                print_error "Homebrew not found. Please install Homebrew first: https://brew.sh"
                exit 1
            fi
            ;;
        debian)
            wget -O espanso.deb https://github.com/espanso/espanso/releases/latest/download/espanso-debian-x11-amd64.deb
            sudo apt install ./espanso.deb
            rm espanso.deb
            ;;
        arch)
            yay -S espanso
            ;;
        *)
            print_error "Automatic installation not supported for your OS."
            print_info "Please install Espanso manually: https://espanso.org/install/"
            exit 1
            ;;
    esac
}

# Check if Espanso is installed
check_espanso() {
    if command -v espanso >/dev/null 2>&1; then
        print_success "Espanso is already installed (version: $(espanso --version))"
        return 0
    else
        return 1
    fi
}

# Get Espanso config directory
get_espanso_config_dir() {
    local config_dir=$(espanso path config 2>/dev/null || echo "")
    
    if [[ -z "$config_dir" ]]; then
        # Fallback to default locations
        if [[ "$OSTYPE" == "darwin"* ]]; then
            config_dir="$HOME/Library/Application Support/espanso"
        else
            config_dir="$HOME/.config/espanso"
        fi
    fi
    
    echo "$config_dir"
}

# Create rivals.yml configuration
create_rivals_config() {
    local config_dir=$1
    local match_dir="$config_dir/match"
    local rivals_file="$match_dir/rivals.yml"
    
    # Create match directory if it doesn't exist
    mkdir -p "$match_dir"
    
    # Backup existing file if present
    if [[ -f "$rivals_file" ]]; then
        local backup_file="$rivals_file.backup.$(date +%Y%m%d_%H%M%S)"
        print_warning "Existing rivals.yml found. Creating backup at $backup_file"
        cp "$rivals_file" "$backup_file"
    fi
    
    print_info "Creating Team of Rivals configuration..."
    
    cat > "$rivals_file" << 'EOF'
# Team of Rivals - Dialectical Engine Text Expansions
# Generated by setup.sh

matches:
  # Main Team of Rivals prompt
  - trigger: ":tor"
    replace: |
      You are a team of five software engineering rivals engaged in a vigorous technical debate.
      
      THE FIVE RIVALS:
      
      🧑‍💻 Helios (The Pragmatist)
      - Philosophy: "Ship working code today, optimize tomorrow"
      - Focus: Simplicity, velocity, clarity, battle-tested solutions
      - Hates: Over-engineering, abstract factories for simple cases
      
      🏛️ Selene (The Architect)  
      - Philosophy: "Design for the system you'll need in two years"
      - Focus: SOLID principles, scalability, maintainability, clear APIs
      - Hates: Quick hacks, magic numbers, inconsistent patterns
      
      🚀 Prometheus (The Innovator)
      - Philosophy: "There is always a better way"
      - Focus: Novel approaches, cutting-edge tech, paradigm shifts
      - Hates: Status quo thinking, "we've always done it this way"
      
      🕵️ Cassandra (The Risk Analyst)
      - Philosophy: "Every line of code is a potential vulnerability"  
      - Focus: Security, edge cases, failure modes, defensive programming
      - Hates: Happy path assumptions, unchecked inputs, race conditions
      
      ❤️ Gaia (The User Advocate)
      - Philosophy: "Code is for humans, not compilers"
      - Focus: UX/DX, intuitive design, clear documentation, empathy
      - Hates: Cryptic errors, poor naming, missing docs
      
      RULES OF ENGAGEMENT:
      1. Each rival MUST provide their perspective
      2. Rivals should directly challenge each other
      3. Use specific technical examples
      4. Reference real-world consequences
      5. Maintain the philosophical tension between approaches
      
      CURRENT TASK (THESIS):
      [Paste your code, problem, or idea here]
      
      Begin the debate! Each rival should critique the thesis from their unique perspective.

  # Synthesis prompt
  - trigger: ":synthesizer"
    replace: |
      Based on the critiques from all five rivals above, synthesize their insights into a superior solution.
      
      SYNTHESIS REQUIREMENTS:
      1. Identify the core tensions between the perspectives
      2. Extract the valuable insight from each critique
      3. Propose a solution that resolves the dialectical conflicts
      4. Show how this synthesis is superior to any single perspective
      5. Provide concrete implementation guidance
      
      Create a solution that would satisfy (or at least acknowledge) each rival's core concerns.

  # Individual persona prompts
  - trigger: ":helios"
    replace: |
      As Helios (The Pragmatist 🧑‍💻), provide your critique focusing on:
      - Simplicity and immediate implementation
      - Developer velocity and clarity
      - Battle-tested, standard solutions
      - Getting working code shipped quickly
      
      Remember: "Ship working code today, optimize tomorrow. Perfect is the enemy of done."

  - trigger: ":selene"
    replace: |
      As Selene (The Architect 🏛️), provide your critique focusing on:
      - SOLID principles and design patterns
      - Long-term maintainability and scalability
      - Clean architecture and clear boundaries
      - System evolution and extensibility
      
      Remember: "Software is built to evolve. Design for the system you'll need in two years."

  - trigger: ":prometheus"
    replace: |
      As Prometheus (The Innovator 🚀), provide your critique focusing on:
      - Novel approaches and paradigm shifts
      - Cutting-edge technology and techniques
      - First-principles thinking
      - Challenging all assumptions
      
      Remember: "There is always a better way. Question everything, innovate relentlessly."

  - trigger: ":cassandra"
    replace: |
      As Cassandra (The Risk Analyst 🕵️), provide your critique focusing on:
      - Security vulnerabilities and attack vectors
      - Edge cases and failure modes
      - Race conditions and concurrency issues
      - Defensive programming and validation
      
      Remember: "Every line of code is a potential vulnerability. Paranoia is a feature, not a bug."

  - trigger: ":gaia"
    replace: |
      As Gaia (The User Advocate ❤️), provide your critique focusing on:
      - User/Developer experience (UX/DX)
      - Intuitive interfaces and clear documentation
      - Helpful error messages and debugging
      - Empathy for the end user
      
      Remember: "Code is for humans, not compilers. If it's not intuitive, it's not finished."

  # Quick snippets for common phrases
  - trigger: ":dialectic"
    replace: "thesis → antithesis → synthesis"
    
  - trigger: ":rivals"
    replace: "Helios, Selene, Prometheus, Cassandra, and Gaia"
EOF
    
    print_success "Team of Rivals configuration created at $rivals_file"
}

# Main setup function
main() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}  Dialectical Engine Setup Script${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo
    
    # Detect OS
    local os_type=$(detect_os)
    print_info "Detected OS: $os_type"
    
    # Check if Espanso is installed
    if ! check_espanso; then
        print_warning "Espanso not found on your system."
        read -p "Would you like to install Espanso? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_espanso "$os_type"
            
            # Verify installation
            if ! check_espanso; then
                print_error "Espanso installation failed."
                exit 1
            fi
        else
            print_error "Espanso is required for the Team of Rivals text expansions."
            print_info "Please install it manually: https://espanso.org/install/"
            exit 1
        fi
    fi
    
    # Get Espanso config directory
    local config_dir=$(get_espanso_config_dir)
    print_info "Espanso config directory: $config_dir"
    
    # Create rivals configuration
    create_rivals_config "$config_dir"
    
    # Register Espanso service (if needed)
    print_info "Registering Espanso service..."
    espanso service register || true
    
    # Start Espanso
    print_info "Starting Espanso..."
    espanso start || espanso restart || true
    
    echo
    print_success "Setup complete! 🎉"
    echo
    echo -e "${GREEN}Available text expansions:${NC}"
    echo "  :tor         - Full Team of Rivals debate prompt"
    echo "  :synthesizer - Synthesis prompt"
    echo "  :helios      - Helios (Pragmatist) critique"
    echo "  :selene      - Selene (Architect) critique"
    echo "  :prometheus  - Prometheus (Innovator) critique"
    echo "  :cassandra   - Cassandra (Risk Analyst) critique"
    echo "  :gaia        - Gaia (User Advocate) critique"
    echo
    echo -e "${YELLOW}Note:${NC} Type any trigger above followed by a space to expand it."
    echo
}

# Run main function
main